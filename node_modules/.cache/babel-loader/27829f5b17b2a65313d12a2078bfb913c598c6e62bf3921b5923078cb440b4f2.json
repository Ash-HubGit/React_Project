{"ast":null,"code":"import dateutil from './dateutil';\nvar DateWithZone = /** @class */function () {\n  function DateWithZone(date, tzid) {\n    if (isNaN(date.getTime())) {\n      throw new RangeError('Invalid date passed to DateWithZone');\n    }\n    this.date = date;\n    this.tzid = tzid;\n  }\n  Object.defineProperty(DateWithZone.prototype, \"isUTC\", {\n    get: function () {\n      return !this.tzid || this.tzid.toUpperCase() === 'UTC';\n    },\n    enumerable: false,\n    configurable: true\n  });\n  DateWithZone.prototype.toString = function () {\n    var datestr = dateutil.timeToUntilString(this.date.getTime(), this.isUTC);\n    if (!this.isUTC) {\n      return \";TZID=\".concat(this.tzid, \":\").concat(datestr);\n    }\n    return \":\".concat(datestr);\n  };\n  DateWithZone.prototype.getTime = function () {\n    return this.date.getTime();\n  };\n  DateWithZone.prototype.rezonedDate = function () {\n    var _a;\n    if (this.isUTC) {\n      return this.date;\n    }\n    var localTimeZone = Intl.DateTimeFormat().resolvedOptions().timeZone;\n    var dateInLocalTZ = new Date(this.date.toLocaleString(undefined, {\n      timeZone: localTimeZone\n    }));\n    var dateInTargetTZ = new Date(this.date.toLocaleString(undefined, {\n      timeZone: (_a = this.tzid) !== null && _a !== void 0 ? _a : 'UTC'\n    }));\n    var tzOffset = dateInTargetTZ.getTime() - dateInLocalTZ.getTime();\n    return new Date(this.date.getTime() - tzOffset);\n  };\n  return DateWithZone;\n}();\nexport { DateWithZone };","map":{"version":3,"mappings":"AAAA,OAAOA,QAAQ,MAAM,YAAY;AAEjC;EAIE,sBAAYC,IAAU,EAAEC,IAAoB;IAC1C,IAAIC,KAAK,CAACF,IAAI,CAACG,OAAO,EAAE,CAAC,EAAE;MACzB,MAAM,IAAIC,UAAU,CAAC,qCAAqC,CAAC;;IAE7D,IAAI,CAACJ,IAAI,GAAGA,IAAI;IAChB,IAAI,CAACC,IAAI,GAAGA,IAAI;EAClB;EAEAI,sBAAYC,+BAAK;SAAjB;MACE,OAAO,CAAC,IAAI,CAACL,IAAI,IAAI,IAAI,CAACA,IAAI,CAACM,WAAW,EAAE,KAAK,KAAK;IACxD,CAAC;;;;EAEMD,+BAAQ,GAAf;IACE,IAAME,OAAO,GAAGT,QAAQ,CAACU,iBAAiB,CAAC,IAAI,CAACT,IAAI,CAACG,OAAO,EAAE,EAAE,IAAI,CAACO,KAAK,CAAC;IAC3E,IAAI,CAAC,IAAI,CAACA,KAAK,EAAE;MACf,OAAO,gBAAS,IAAI,CAACT,IAAI,cAAIO,OAAO,CAAE;;IAGxC,OAAO,WAAIA,OAAO,CAAE;EACtB,CAAC;EAEMF,8BAAO,GAAd;IACE,OAAO,IAAI,CAACN,IAAI,CAACG,OAAO,EAAE;EAC5B,CAAC;EAEMG,kCAAW,GAAlB;;IACE,IAAI,IAAI,CAACI,KAAK,EAAE;MACd,OAAO,IAAI,CAACV,IAAI;;IAGlB,IAAMW,aAAa,GAAGC,IAAI,CAACC,cAAc,EAAE,CAACC,eAAe,EAAE,CAACC,QAAQ;IACtE,IAAMC,aAAa,GAAG,IAAIC,IAAI,CAC5B,IAAI,CAACjB,IAAI,CAACkB,cAAc,CAACC,SAAS,EAAE;MAAEJ,QAAQ,EAAEJ;IAAa,CAAE,CAAC,CACjE;IACD,IAAMS,cAAc,GAAG,IAAIH,IAAI,CAC7B,IAAI,CAACjB,IAAI,CAACkB,cAAc,CAACC,SAAS,EAAE;MAAEJ,QAAQ,EAAE,UAAI,CAACd,IAAI,mCAAI;IAAK,CAAE,CAAC,CACtE;IACD,IAAMoB,QAAQ,GAAGD,cAAc,CAACjB,OAAO,EAAE,GAAGa,aAAa,CAACb,OAAO,EAAE;IAEnE,OAAO,IAAIc,IAAI,CAAC,IAAI,CAACjB,IAAI,CAACG,OAAO,EAAE,GAAGkB,QAAQ,CAAC;EACjD,CAAC;EACH,mBAAC;AAAD,CAAC,EA7CD","names":["dateutil","date","tzid","isNaN","getTime","RangeError","Object","DateWithZone","toUpperCase","datestr","timeToUntilString","isUTC","localTimeZone","Intl","DateTimeFormat","resolvedOptions","timeZone","dateInLocalTZ","Date","toLocaleString","undefined","dateInTargetTZ","tzOffset"],"sources":["../../src/datewithzone.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module","externalDependencies":[]}