{"ast":null,"code":"import dateutil from './dateutil';\nimport IterResult from './iterresult';\nimport CallbackIterResult from './callbackiterresult';\nimport { fromText, parseText, toText, isFullyConvertible } from './nlp/index';\nimport { Frequency } from './types';\nimport { parseOptions, initializeOptions } from './parseoptions';\nimport { parseString } from './parsestring';\nimport { optionsToString } from './optionstostring';\nimport { Cache } from './cache';\nimport { Weekday } from './weekday';\nimport { iter } from './iter/index';\n// =============================================================================\n// RRule\n// =============================================================================\nexport var Days = {\n  MO: new Weekday(0),\n  TU: new Weekday(1),\n  WE: new Weekday(2),\n  TH: new Weekday(3),\n  FR: new Weekday(4),\n  SA: new Weekday(5),\n  SU: new Weekday(6)\n};\nexport var DEFAULT_OPTIONS = {\n  freq: Frequency.YEARLY,\n  dtstart: null,\n  interval: 1,\n  wkst: Days.MO,\n  count: null,\n  until: null,\n  tzid: null,\n  bysetpos: null,\n  bymonth: null,\n  bymonthday: null,\n  bynmonthday: null,\n  byyearday: null,\n  byweekno: null,\n  byweekday: null,\n  bynweekday: null,\n  byhour: null,\n  byminute: null,\n  bysecond: null,\n  byeaster: null\n};\nexport var defaultKeys = Object.keys(DEFAULT_OPTIONS);\n/**\n *\n * @param {Options?} options - see <http://labix.org/python-dateutil/#head-cf004ee9a75592797e076752b2a889c10f445418>\n * - The only required option is `freq`, one of RRule.YEARLY, RRule.MONTHLY, ...\n * @constructor\n */\nvar RRule = /** @class */function () {\n  function RRule(options, noCache) {\n    if (options === void 0) {\n      options = {};\n    }\n    if (noCache === void 0) {\n      noCache = false;\n    }\n    // RFC string\n    this._cache = noCache ? null : new Cache();\n    // used by toString()\n    this.origOptions = initializeOptions(options);\n    var parsedOptions = parseOptions(options).parsedOptions;\n    this.options = parsedOptions;\n  }\n  RRule.parseText = function (text, language) {\n    return parseText(text, language);\n  };\n  RRule.fromText = function (text, language) {\n    return fromText(text, language);\n  };\n  RRule.fromString = function (str) {\n    return new RRule(RRule.parseString(str) || undefined);\n  };\n  RRule.prototype._iter = function (iterResult) {\n    return iter(iterResult, this.options);\n  };\n  RRule.prototype._cacheGet = function (what, args) {\n    if (!this._cache) return false;\n    return this._cache._cacheGet(what, args);\n  };\n  RRule.prototype._cacheAdd = function (what, value, args) {\n    if (!this._cache) return;\n    return this._cache._cacheAdd(what, value, args);\n  };\n  /**\n   * @param {Function} iterator - optional function that will be called\n   * on each date that is added. It can return false\n   * to stop the iteration.\n   * @return Array containing all recurrences.\n   */\n  RRule.prototype.all = function (iterator) {\n    if (iterator) {\n      return this._iter(new CallbackIterResult('all', {}, iterator));\n    }\n    var result = this._cacheGet('all');\n    if (result === false) {\n      result = this._iter(new IterResult('all', {}));\n      this._cacheAdd('all', result);\n    }\n    return result;\n  };\n  /**\n   * Returns all the occurrences of the rrule between after and before.\n   * The inc keyword defines what happens if after and/or before are\n   * themselves occurrences. With inc == True, they will be included in the\n   * list, if they are found in the recurrence set.\n   *\n   * @return Array\n   */\n  RRule.prototype.between = function (after, before, inc, iterator) {\n    if (inc === void 0) {\n      inc = false;\n    }\n    if (!dateutil.isValidDate(after) || !dateutil.isValidDate(before)) {\n      throw new Error('Invalid date passed in to RRule.between');\n    }\n    var args = {\n      before: before,\n      after: after,\n      inc: inc\n    };\n    if (iterator) {\n      return this._iter(new CallbackIterResult('between', args, iterator));\n    }\n    var result = this._cacheGet('between', args);\n    if (result === false) {\n      result = this._iter(new IterResult('between', args));\n      this._cacheAdd('between', result, args);\n    }\n    return result;\n  };\n  /**\n   * Returns the last recurrence before the given datetime instance.\n   * The inc keyword defines what happens if dt is an occurrence.\n   * With inc == True, if dt itself is an occurrence, it will be returned.\n   *\n   * @return Date or null\n   */\n  RRule.prototype.before = function (dt, inc) {\n    if (inc === void 0) {\n      inc = false;\n    }\n    if (!dateutil.isValidDate(dt)) {\n      throw new Error('Invalid date passed in to RRule.before');\n    }\n    var args = {\n      dt: dt,\n      inc: inc\n    };\n    var result = this._cacheGet('before', args);\n    if (result === false) {\n      result = this._iter(new IterResult('before', args));\n      this._cacheAdd('before', result, args);\n    }\n    return result;\n  };\n  /**\n   * Returns the first recurrence after the given datetime instance.\n   * The inc keyword defines what happens if dt is an occurrence.\n   * With inc == True, if dt itself is an occurrence, it will be returned.\n   *\n   * @return Date or null\n   */\n  RRule.prototype.after = function (dt, inc) {\n    if (inc === void 0) {\n      inc = false;\n    }\n    if (!dateutil.isValidDate(dt)) {\n      throw new Error('Invalid date passed in to RRule.after');\n    }\n    var args = {\n      dt: dt,\n      inc: inc\n    };\n    var result = this._cacheGet('after', args);\n    if (result === false) {\n      result = this._iter(new IterResult('after', args));\n      this._cacheAdd('after', result, args);\n    }\n    return result;\n  };\n  /**\n   * Returns the number of recurrences in this set. It will have go trough\n   * the whole recurrence, if this hasn't been done before.\n   */\n  RRule.prototype.count = function () {\n    return this.all().length;\n  };\n  /**\n   * Converts the rrule into its string representation\n   *\n   * @see <http://www.ietf.org/rfc/rfc2445.txt>\n   * @return String\n   */\n  RRule.prototype.toString = function () {\n    return optionsToString(this.origOptions);\n  };\n  /**\n   * Will convert all rules described in nlp:ToText\n   * to text.\n   */\n  RRule.prototype.toText = function (gettext, language, dateFormatter) {\n    return toText(this, gettext, language, dateFormatter);\n  };\n  RRule.prototype.isFullyConvertibleToText = function () {\n    return isFullyConvertible(this);\n  };\n  /**\n   * @return a RRule instance with the same freq and options\n   * as this one (cache is not cloned)\n   */\n  RRule.prototype.clone = function () {\n    return new RRule(this.origOptions);\n  };\n  // RRule class 'constants'\n  RRule.FREQUENCIES = ['YEARLY', 'MONTHLY', 'WEEKLY', 'DAILY', 'HOURLY', 'MINUTELY', 'SECONDLY'];\n  RRule.YEARLY = Frequency.YEARLY;\n  RRule.MONTHLY = Frequency.MONTHLY;\n  RRule.WEEKLY = Frequency.WEEKLY;\n  RRule.DAILY = Frequency.DAILY;\n  RRule.HOURLY = Frequency.HOURLY;\n  RRule.MINUTELY = Frequency.MINUTELY;\n  RRule.SECONDLY = Frequency.SECONDLY;\n  RRule.MO = Days.MO;\n  RRule.TU = Days.TU;\n  RRule.WE = Days.WE;\n  RRule.TH = Days.TH;\n  RRule.FR = Days.FR;\n  RRule.SA = Days.SA;\n  RRule.SU = Days.SU;\n  RRule.parseString = parseString;\n  RRule.optionsToString = optionsToString;\n  return RRule;\n}();\nexport { RRule };","map":{"version":3,"mappings":"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","names":["dateutil","IterResult","CallbackIterResult","fromText","parseText","toText","isFullyConvertible","Frequency","parseOptions","initializeOptions","parseString","optionsToString","Cache","Weekday","iter","Days","MO","TU","WE","TH","FR","SA","SU","DEFAULT_OPTIONS","freq","YEARLY","dtstart","interval","wkst","count","until","tzid","bysetpos","bymonth","bymonthday","bynmonthday","byyearday","byweekno","byweekday","bynweekday","byhour","byminute","bysecond","byeaster","defaultKeys","Object","keys","options","noCache","_cache","origOptions","parsedOptions","RRule","text","language","str","undefined","iterResult","what","args","_cacheGet","value","_cacheAdd","iterator","_iter","result","after","before","inc","isValidDate","Error","dt","all","length","gettext","dateFormatter","MONTHLY","WEEKLY","DAILY","HOURLY","MINUTELY","SECONDLY"],"sources":["../../src/rrule.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module","externalDependencies":[]}